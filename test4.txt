[Čemu odpovídá posuv doleva/doprava o
n
pozic?] -> [Posuv doleva o
n
pozic|||| Násobení mocninou dvojky, tj.
x<<n=x⋅2n|||| Posuv doprava o
n
pozic.|||| Dělení mocninou dvojky, tj.
x>>n=x2n
.]
[Z libovolného nestabilního řadicího algoritmu lze učinit algoritmus stabilní.] -> [Ano]
[Následující strom má hloubku (výšku) __.] -> [3]
[Jaký bude výsledek po provedení následujících operaci nad zásobníkem?
1
2
3
4
5
  let stack = [1, 2, 3, 3, 4, 5]; //číslo 5 - ukazatel zásobníku
  stack.pop();
  stack.pop();
  stack.push(stack.pop());
  stack.push(5);] -> [1
  let stack = [1, 2, 3, 3, 5];]
[Při konstantní složitosti __ na množství vstupních dat a čas potřebný pro zpracování bude stejný.] -> [nezáleží|||| stejný]
[Co bude vypsáno do konzole po provedení následující operace?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Set.prototype.intersection = function(otherSet) 
{ 
    let intersectionSet = new Set(); 
      for(let elem of otherSet) 
    { 
        if(this.has(elem)) 
            intersectionSet.add(elem); 
    } 
  return intersectionSet;                 
} 
let set1 = new Set([1, 2, 3, 4, 5]); 
let set2 = new Set([4, 5, 6, 7, 8]);   
  let intersectionSet = set1.intersection(set2); 
  console.log(intersectionSet.values());] -> [1
[4, 5]]
[Za přirozený algoritmus se považuje algoritmus, který zpracuje rychleji seřazenou nebo částečně seřazenou posloupnost, když nepřirozenému algoritmu zpracovávaní seřazené nebo částečně seřazené posloupnosti trvá déle.] -> [přirozený algoritmus|||| nepřirozenému algoritmu]
[Pokud
x=00000100
a
y=00000101
. Poté nám operace
x
AND
y
vrátí 00000100.] -> [00000100]
[Pojem __ znamená zajistit uspořádání záznamů (například pole, spojový seznam, soubor) do požadovaného pořadí.] -> [řazení]
[Který algoritmus má vždy časovou složitost
O(n log n)
?] -> [merge sort]
[Platí, že
n−log⁡n∈O(n)
?] -> [Ano]
[Při konstantní složitosti nezáleží na množství vstupních dat a čas potřebný pro zpracování bude __.] -> [nezáleží|||| stejný]
[Paměťová složitost udává, kolik paměťových jednotek algoritmus spotřebuje během výpočtu.] -> [Paměťová složitost]
[Co bude vypsáno do konzole po provedení následující operace?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Set.prototype.subSet = function(otherSet) 
{ 
    if(this.size > otherSet.size) 
        return false; 
    else
    { 
        for(let elem of this) 
        { 
            if(!otherSet.has(elem)) 
                return false; 
        } 
        return true; 
    } 
} 
let setA = new Set([1, 4, 6]); 
let setB = new Set([5, 6, 1, 2, 3, 4]); 
console.log(setA.subSet(setB))] -> [1
true]
[Jaké jsou nevýhody reprezentace s plovoucí řádovou čárkou?] -> [Když neumí číslo reprezentovat, typicky ho nahradí nejbližším reprezentovatelným.|||| Potřebuje více místa v paměti.|||| Neumí reprezentovat všechna racionální/reálná čísla.|||| Rozdělujeme reprezentaci čísla na mantisu a exponent, kdy mantisa nemusí nabízet dostatek místa a může způsobovat zaokrouhlovací chyby.|||| Mezery mezi reprezentovatelnými čísly nejsou rovnoměrné.]
[O jaký typ přímé rekurze se jedná?
1
2
3
4
5
6
function f(low, high) {
    if low == 1 && high == 1
        return 1;
    else
        return f(low + 1, high-1);
}] -> [lineární|||| hlavičková|||| koncová]
[Který z kódů je kódem algoritmu merge sort?] -> [1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
  function mergeSort (array) {
    if (array.length <= 1) {
      return array;
    }
    let middle = Math.floor(array.length / 2);
    let left = array.slice(0, middle);
    let right = array.slice(middle);
    return this.merge(this.mergeSort(left), this.mergeSort(right));
  }
  function merge (left, right) {
    let resultArray = [];
    let leftIndex = 0;
    let rightIndex = 0;
    while (leftIndex < left.length && rightIndex < right.length) {
      if (left[leftIndex] < right[rightIndex]) {
        resultArray.push(left[leftIndex]);
        leftIndex++;
      } else {
        resultArray.push(right[rightIndex]);
        rightIndex++;
      }
    }
    return resultArray.concat(left.slice(leftIndex)).concat(right.slice(rightIndex))
  }
    ]
[U aritmetického posuvu se hodnota nejvyššího (nejvýznamnějšího) bitu __, i když v případě logického posuvu na obě krajní pozice se vždy nasouvají hodnoty 0 i v případě nejvyšších bitů.] -> [zachovává|||| 0]
[N-arita binárního stromu je __.] -> [2]
[Uspořádejte asymptotické složitosti vzestupně.] -> [O(1)|||| O(log n)|||| O(n2)|||| O(n!)]
[Jaký je rozdíl mezi složitostí algoritmu a složitostí problému?] -> [složitost problému|||| složitost nejlepšího (známého i teoretického) algoritmu řešícího zadanou úlohu|||| složitost algoritmu|||| složitost konkrétního algoritmu řešícího zadanou úlohu]
[Které desítkové číslo reprezentuje binární číslo 1111?] -> [15]
[Pomocí kterého algoritmu je zde zobrazeno řazení polí?
[5, 1, 4, 2, 8]
[1, 5, 4, 2, 8]
[1, 4, 5, 2, 8]
[1, 4, 2, 5, 8]
[1, 2, 4, 5, 8]] -> [bubble sort]
[Které z následujících vlastností platí pro haldu?] -> [Strom je velmi vyvážený.|||| Poslední "patro" haldy je zaplněno zleva.|||| Každý vnitřní vrchol má právě 2 syny.]
[Pokud
x=00000100
a
y=00000101
. Poté nám operace
x
XOR
y
vrátí __.] -> [1]
[Co znamená zkratka LIFO?] -> [Poslední vložený prvek do zásobníku bude prvním prvkem, který ze zásobníku vyjmeme.]
[Říkáme, že řazení je stabilní, pokud nedojde v jeho průběhu k prohození prvků se stejnou hodnotou.] -> [stabilní]
[Co bude vypsáno do konzole po provedení následující operace?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
Set.prototype.difference = function(otherSet) 
{ 
     let differenceSet = new Set(); 
      for(let elem of this) 
    { 
        if(!otherSet.has(elem)) 
            differenceSet.add(elem); 
    } 
      return differenceSet; 
} 
  let set1 = new Set([1, 2, 3, 4, 5]); 
let set2 = new Set([4, 5, 6, 7, 8]);   
  let differenceSet = set1.difference(set2); 
  console.log(differenceSet);] -> [1
[1, 2, 3]]
[K čemu při implementaci quicksortu dojde, bude-li opakovaně nejmenší prvek volen jako pivot (za předpokladu velké posloupnosti)?] -> [K pádu aplikace z důvodu vyčerpání paměti.|||| K lineárnímu růstu spotřeby paměti.]
[Následující problém je variantou problému Loupežníků. Představme si, že místo dvou máme tři loupežníky, kteří chtějí rozdělit lup na tři stejné části. Leží i tento problém ve třídě NP?] -> [Ano]
[Pokud budeme chtít smazat prvek seznamu, který je potřeba vyhledat, tak složitost této operace bude __.] -> [O(n)]
[V čem spočívá základní myšlenka algoritmu selection sort?] -> [V nalezení minima/maxima, které se přesune na začátek/konec pole.]
[Pokud je
x=00000100
, poté nám operace NOT
x
vrátí __.] -> [11111011]
[Máme následující vstupní hodnoty [121, 145, 273, 542, 464, 275] a hashovácí funkci
x mod 10
.
Nápověda: kolize se řeší tak, že se prvek vloží na následující nejbližší volný hash. Jak bude ve výsledku vypadat hashovací tabulka?] -> [1 121
2 542
3 273
4 464
5 145
6 275]
[Asymptotická složitost výběru a čtení prvku na prvním indexu je O (1) , složitost operace přidání prvku na konec fronty je O (1) .] -> [O (1)]
[Který z pseudokódů je pseudokódem algoritmu selection sort?] -> [1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
function selectionSort(array, opt="asc") {
  compare = (opt === "asc") ? compareAsc : compareDesc;
  for (let i = 0; i < array.length - 1; i++) {
    let searchIndex = i;
    for (let j = i + 1; j < array.length; j++) {
      if (compare(array[j],array[searchIndex])) { 
        searchIndex = j;
      }
    }
    let item = array[i];
    array[i] = array[searchIndex];
    array[searchIndex] = item;
  }
}]
[Merge sort je algoritmus založený na principu rozděl a panuj.] -> [principu rozděl a panuj]
[Vytvoříme dva binární vyhledávací stromy postupným vložením následujících posloupností prvků. První strom pomocí posloupnosti [1, 5, 3, 4, 7, 2] a druhý pomocí posloupnosti [11, 49, 31, 39, 71, 19]? Budou mít oba stromy shodný tvar?] -> [Ano]
[Které operace mají na obousměrném spojovém seznamu s hlavou i ocasem konstantní časovou složitost i v nejhorším případě?] -> [Přidání prvku na začátek seznamu|||| Mazání prvku ze začátku seznamu|||| Přidání prvku na konec seznamu|||| Mazání prvku z konce seznamu]
[Co z následujícího se dá považovat za algoritmus?] -> [návod k obsluze tiskárny|||| recept na palačinky|||| návod na Rubikovu kostku]
[Pojem řazení znamená zajistit uspořádání záznamů (například pole, spojový seznam, soubor) do požadovaného pořadí.] -> [řazení]
[Časová složitost algoritmu bubble sort je __.] -> [O(n2)]
[Co bude vypsáno do konzole po provedení následující operace?
1
2
3
4
5
6
7
8
9
10
let set1 = new Set(); 
  set1.add(1); 
set1.add(2); 
  set1.add(3).add(4).add(5); 
set1.delete(1).delete(2);
  console.log(set1);] -> [1
[3, 4, 5]]
[Co z následujícího patří mezi vlastnosti hashovací funkce?] -> [Malou změnou vstupních dat dosáhneme velké změny na výstupu.|||| Z hashe je prakticky nemožné rekonstruovat původní text zprávy.|||| Jakékoliv množství vstupních dat poskytuje stejně dlouhý výstup.]
[Jak bude vypadat číslo 10010111 po logickém posunu o jednu pozici doprava?] -> [01001011]
[Jsou následující funkce pro výpočet Fibonacciho čísel ekvivalentní, tedy dávají stejné vstupy pro stejné výstupy?
1
2
3
4
5
  function fibonacci(n) {
    if (n == 0) return 0
    else if (n == 1) return 1
    else return fibonacci(n-1) + fibonacci(n-2)
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
function fibonacci(n) {
    if (n == 0) return 0
    if (n == 1) return 1
        let result = 0
    let lastNum = 0
    let num = 1
    for (i = 1; i < n; i++) { 
      result = lastNum + num
      lastNum = num
      num = result
    }
        return result
}] -> [Ano]
[Máme následující vstupní hodnoty [126, 145, 276, 548, 466] a hashovácí funkce
x mod 10
.
Které hodnoty budou zařazeny do hashovací tabulky pod stejným hashem?] -> [126, 276, 466]
[Pokud
x=00000100
a
y=00000101
. Poté nám operace
x
XOR
y
vrátí 1.] -> [1]
[U aritmetického posuvu se hodnota nejvyššího (nejvýznamnějšího) bitu __, i když v případě logického posuvu na obě krajní pozice se vždy nasouvají hodnoty __ i v případě nejvyšších bitů.] -> [zachovává|||| 0]
[Jaké platí vlastnosti pro algoritmus insertion sort?] -> [je stabilní|||| časová složitost
O(n2)|||| je přirozený]
[Jak bude vypadat průběh řazení algoritmem insertion sort pro pole čísel [5, 3, 1, 2, 6, 4]] -> [[3, 5, 1, 2, 6, 4]|||| [1, 3, 5, 2, 6, 4]|||| [1, 2, 3, 5, 6, 4]|||| [1, 2, 3, 4, 5, 6]]
[Kruhový buffer lze implementovat pomocí] -> [pole|||| spojového seznamu]
[__ udává, kolik algoritmus provede elementárních operací vzhledem k velikosti vstupních dat.] -> [Časová složitost]
[Je každý stabilní algoritmus přirozený?] -> [Ne]
[Algoritmus selection sort __, to znamená že může změnit pořadí u prvků se shodným klíčem a nepatří mezi přirozené řadicí algoritmy (částečně seřazený seznam se bude zpracovávat stejně dlouho jako neseřazený).] -> [není stabilní|||| nepatří]
[Seřaďte složitostní třídy zleva doprava tak, aby každá třída byla vždy obsažená v třídě napravo od ní.] -> [P|||| NP|||| EXP]
[Selection sort je vhodný zejména pro uspořádání __ množství dat.] -> [malých]
[Mějme následující problém:
„Je číslo
x
nejmenším číslem v posloupnosti
n
čísel?“ Leží tento problém ve třídě P?] -> [Ano]
[Nechť
n
označuje ve stromu počet všech uzlů na nejdelší cestě z kořene do listu. Potom má strom hloubku rovnou
n
+ __] -> [-1]
[Jak bude vypadat postup přidávaní nového prvku v max heap?] -> [Vytvoříme uzel na konci haldy.|||| Přidáme do uzlu hodnotu.|||| Pokud hodnota je menší než rodič, je nutné ukončit běh. Pokud hodnota je větší než rodič, je nutné prohodit uzly.|||| Je nutné opakovat krok 3, dokud se nesplní základní vlastnost haldy.]
[U kterého příkladu se jedná o nestabilní algoritmus?] -> [1
2
3
INPUT: (Connelly, Jaheim, 18), (Brewer, Anabel, 21), (Brewer, Ayrton, 21) //(klíč, hodnota, klíč)
OUTPUT1: (Brewer, Anabel, 21), (Brewer, Ayrton, 21), (Connelly, Jaheim, 18)
OUTPUT2: (Brewer, Ayrton, 21), (Brewer, Anabel, 21), (Connelly, Jaheim, 18)]
[Jaké platí vlastnosti pro algoritmus bubble sort?] -> [Je stabilní.|||| Je přirozený.|||| Není efektivní.|||| Nevyžaduje další paměť.]
[Za __ se považuje algoritmus, který zpracuje rychleji seřazenou nebo částečně seřazenou posloupnost, když __ zpracovávaní seřazené nebo částečně seřazené posloupnosti trvá déle.] -> [přirozený algoritmus|||| nepřirozenému algoritmu]
[Přiřaď časovou složitost algoritmu.] -> [Lineární vyhledávání|||| O(n)|||| Binární vyhledávání|||| O(log n)]
[Co všechno muže být klíčem v asociativním poli?] -> [datum|||| celé číslo|||| binární číslo|||| řetězec (text)]
[U kterého příkladu se jedná o stabilní algoritmus?] -> [1
2
3
INPUT: (Wells, Nada), (Beattie, Blanka), (Beattie, Samiya) //(klíč, hodnota)
OUTPUT1: (Beattie, Blanka), (Beattie, Samiya), (Wells, Nada)
OUTPUT2: (Beattie, Blanka), (Beattie, Samiya), (Wells, Nada)]
[Při implementaci merge sortu je vhodné použit rekurzi.] -> [je vhodné]
[Při implementaci merge sortu __ použit rekurzi.] -> [je vhodné]
[Jaké vlastnosti musí splňovat algoritmus?] -> [Skládá se z elementárních bloků/operací.|||| Algoritmus řeší obecnější úlohu, ne jen konkrétní výpočet.]
[Přiřaď každé operaci její asymptotickou složitost.] -> [Přístup k prvku|||| O(1)|||| Vyhledávání prvku|||| O(n)|||| Vyhledávání prvku v seřazeném poli|||| O(log n)]
[Který standard popisuje reprezentaci s plovoucí řádovou čárkou?] -> [IEEE 754]
[Jaké platí vlastnosti pro algoritmus selection sort?] -> [není přirozený|||| je pomalý|||| časová složitost
O(n2)]
[Jaké platí vlastnosti pro algoritmus quicksort?] -> [Je velmi rychlý vzhledem ke všem řadicím algoritmům.|||| Časová složitost je
O(n log n)
, v nejhorším případě
O(n2)
.|||| Není přirozený.]
[Jaká je N-arita následujícího stromu?] -> [3]
[Ve kterých případech je výhodnější použít pole namísto spojového seznamu?] -> [Chceme pracovat s prvky na konci|||| Chceme k prvkům rychle přistupovat pomocí náhodného přístupu|||| Předem známe počet vstupních prvků]
[Chceme-li skladovat čísla osob, které jsme vybrali pro dotazníkové šetření, použijeme.] -> [Statickou množinu]
[Jak bude vypadat průběh řazení algoritmem selection sort pro pole čísel [5, 3, 6, 2, 1, 4]] -> [[1, 3, 6, 2, 5, 4]|||| [1, 2, 6, 3, 5, 4]|||| [1, 2, 3, 6, 5, 4]|||| [1, 2, 3, 4, 5, 6]]
[Jaké platí vlastnosti pro algoritmus merge sort?] -> [Vyžaduje další paměť.|||| Je přirozený.|||| Je stabilní.]
[Vylepšením merge sortu se lze dodatečné paměti zbavit.] -> [Ne]
[Pokud indexujeme v haldě od hodnoty 0, pak pro potomky bude platit __ a __ .] -> [2 ⋅ i + 1|||| 2 ⋅ i + 2]
[Kolize je situace, kdy se záznamy s různými klíči hashují zvolenou funkcí na stejné místo v hashovací tabulce.] -> [Ano]
[Časová složitost algoritmu bubble sort je
O(n2)
.] -> [O(n2)]
[Jaká je časová složitost algoritmu merge sort?] -> [O(n log n)]
[Co bude vypsáno do konzole po provedení následující operace?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Set.prototype.union = function(otherSet) 
{ 
    let unionSet = new Set(); 
      for (let elem of this) 
    { 
        unionSet.add(elem); 
    } 
      for(let elem of otherSet) 
        unionSet.add(elem); 
      return unionSet; 
} 
let set1 = new Set([1, 2, 3, 4, 5]); 
let set2 = new Set([5, 6, 7, 8]);   
let unionSet = set1.union(set2); 
  console.log(unionSet.values());] -> [1
[1, 2, 3, 4, 5, 6, 7, 8]]
[Jedná se o korektní rekurzivní funkci v JavaScriptu, která ověří, zda je řetězec tzv. palindrom?
Palindrom je řetězec, který je stejný při čtení zepředu i zezadu (například slova krk, madam, nepochopen).
1
2
3
4
5
6
7
8
9
10
11
12
13
14
function palindrome(str) {
    let cleanStr = clean(str);
    let strLength = cleanStr.length;
        if (strLength < 2) {
        return true;
    }
    if (cleanStr[0] == cleanStr[strLength - 1]) {
        return palindrome(cleanStr.slice(1, strLength - 1));
    }
    return false;
};] -> [Ano]
[Na kterém indexu se nachází hodnota 7, pokud indexujeme od 0 shora dolů a zleva doprava.] -> [2 · 2 + 1 = 5]
[Máme kruhový buffer s již vloženými následujícími čísly. Nový prvek do kruhového bufferu bude vložen na místo s indexem __? (indexujeme od 0 a '-' značí prázdná místa v poli).] -> [0]
[Pokud do prázdného binárního vyhledávacího stromu vložíme postupně n hodnot, jaká bude hloubka stromu v nejhorším možném případě?] -> [O(n)]
[Jak bude vypadat číslo 00010111 po rotaci doprava?] -> [10001011]
[Jak bude vypadat číslo 00010111 po rotaci doleva?] -> [00101110]
[Bit, který je při posuvu vysouván z hodnoty ven, je při __ opět vkládán na opačném konci.] -> [posuvu|||| rotaci]
[Ve kterých datových strukturách se používají následující typy vyhledávaní?] -> [Lineární vyhledávání|||| V neseřazeném poli.|||| Binární vyhledávání|||| V seřazeném poli.]
[Jaký bude výsledek po provedení operace pop nad zásobníkem?
1
2
  let stack = [1, 2, null, 3, 4]; //číslo 4 - ukazatel zásobníku
  stack.pop();] -> [1
  let stack = [1, 2, null, 3];]
[Algoritmus selection sort není stabilní, to znamená že může změnit pořadí u prvků se shodným klíčem a __ mezi přirozené řadicí algoritmy (částečně seřazený seznam se bude zpracovávat stejně dlouho jako neseřazený).] -> [není stabilní|||| nepatří]
[Za ideálně zvoleného pivota se považuje __ řazené posloupnosti.] -> [medián]
[Jak bude vypadat průběh řazení algoritmem bubble sort pro pole čísel [5, 3, 6, 4]] -> [[3, 5, 6, 4]|||| [3, 5, 4, 6]|||| [3, 4, 5, 6]]
[Která rekurze je nepřímá?] -> [1
2
3
4
5
6
7
function g(a) {
    return f(a+1)
}
function f(a) {
    return g(a-1)
}]
[Pro hledání jména v telefonním seznamu je vhodnější použít __.] -> [binární vyhledávání]
[Za ideálně zvoleného pivota se považuje medián řazené posloupnosti.] -> [medián]
[Při konstantní složitosti nezáleží na množství vstupních dat a čas potřebný pro zpracování bude stejný.] -> [nezáleží|||| stejný]
[Co platí pro třídu NP?] -> [Obsahuje problémy, jejichž řešení je ověřitelné v polynomiálním čase.|||| Obsahuje problémy řešitelné v polynomiálním čase.|||| Obsahuje problémy řešitelné v kvadratickém čase.|||| Obsahuje problémy řešitelné v exponenciálním čase.]
[Co patří mezi poziční číselné soustavy?] -> [trojková soustava|||| osmičková soustava|||| desítková soustava|||| dvojková soustava]
[Co znamená vnitřní a vnější řazení?] -> [Vnitřní řazení|||| Řazení, kdy předem známe řazené záznamy a máme pro ně k dispozici dostatek volné paměti.|||| Vnější řazení|||| Řazení, kdy jednotlivé záznamy předem neznáme a ze vstupu je postupně načítáme v pořadí, v kterém na vstup přicházejí.]
[Mějme algoritmus A s délkou výpočtu
n+1000
a algorimus B s délkou výpočtu
4n
, kde
n
je počet vstupních dat. Který algoritmus z hlediska časové složitosti je vhodnější pro hodnoty, kdy
n
je z množiny celých kladných čísel?] -> [A]
[Pokud přidáváme prvek na konec pole, tak asymptotická složitost této operace bude
O(1)
.] -> [Ano]
[Přiřaď každému typu uzlu jeho význam.] -> [Kořen stromu (root)|||| Je nejvyšší uzel stromu.|||| Vnitřní uzly (inner node, internal node)|||| Uzly mající svého rodiče a své potomky.|||| Koncové uzly (listy, leaf, leaf node)|||| Uzly, které mají svého rodiče, ale nemají svého potomka.]
[Asymptotická složitost výběru a čtení prvku na prvním indexu je O (1) , složitost operace přidání prvku na konec fronty je __ .] -> [O (1)]
[Jak se zapisuje asymptotická složitost algoritmu?] -> [O(f(N))]
[Co se stane, když do bufferu bude přidán nový prvek?] -> [Druhý ukazatel (EndPointer) inkrementuje.]
[Desítkové číslo 11 má v binární soustavě zápis __ 0 __ __] -> [1|||| 0]
[Jak bude vypadat číslo 10010111 po aritmetickém posunu o jednu pozici doprava?] -> [11001011]
[Obsahuje následující rekurzivní algoritmus vhodnou zarážku, která způsobí konečné volání rekurzí pro každé přirozené číslo na vstupu?
1
2
3
4
5
6
function f(a) {
    if (a <= 0) {
        return 0;
    }
    return f(a+1)
}] -> [Ne]
[Pokud přidáváme prvek na začátek pole, tak asymptotická složitost této operace bude
O(1)
.] -> [Ne]
[Množina umožňuje duplicity stejně jako spojový seznam a pole.] -> [Ne]
[Které desítkové číslo reprezentuje binární číslo 1001?] -> [9]
[Který z kódů je kódem algoritmu bubble sort?] -> [1
2
3
4
5
6
7
8
9
10
11
12
function bubbleSortAscending(array) {
  for (let i = 0; i < array.length - 1; i++) {
    for (let j = 0; j < array.length - i - 1; j++) {
      if(array[j] > array[j+1]) {
        let item = array[j];
        array[j] = array[j+1];
        array[j+1] = item;
      }
    }
  }
} 
    ]
[Pokud
x=00000100
a
y=00000101
. Poté nám operace
x
OR
y
vrátí __.] -> [00000101]
[Strom, který obsahuje jeden prvek, je také stromem.] -> [Ano]
[Seřaďte jednotlivé kroky algoritmu binárního vyhledávání?] -> [Zvolíme medián seřazené posloupnosti (n/2).|||| Pokud se hledaný prvek shoduje s mediánem, ukončit hledání.|||| Pokud je medián větší, tak pokračovat do pravé poloviny posloupnosti, pokud je menší, tak do levé.|||| Pokračovat v půlení posloupnosti až do nalezení hledaného prvku, anebo do vyčerpání posloupnosti.]
[Pro kterou metodu je platný výraz "Kdo dřív přijde, ten dřív mele"?] -> [FIFO]
[Asymptotická složitost výběru a čtení prvku na prvním indexu je __ , složitost operace přidání prvku na konec fronty je __ .] -> [O (1)]
[K popisu paměťové/prostorové složitosti algoritmu používáme __ závisející na velikosti vstupních dat.] -> [funkci]
[__ udává, kolik paměťových jednotek algoritmus spotřebuje během výpočtu.] -> [Paměťová složitost]
[Je desítkové číslo 0.00005 korektně reprezentováno v reprezentaci s plovoucí řádovou čárkou jako
+.05×10−3
?] -> [Ne]
[Co platí pro následující řadicí algoritmy?] -> [insertion sort|||| Má časovou složitost
O(n2)
; je stabilní; je přirozený.|||| selection sort|||| Má časovou složitost
O(n2)
; není stabilní; není přirozený.]
[Který typ dle umístění vstupních záznamů použijeme v případě, kdy je nedostatek paměti a my nejsme schopni do této paměti uložit všechny záznamy?] -> [vnější řazení]
[Jak vypadá průběh algoritmu selection sort?] -> [Rozdělit posloupnost na seřazenou a neseřazenou část.|||| Najít prvek s nejmenší hodnotou v neseřazené části posloupnosti.|||| Zaměnit nalezený prvek s prvkem na první pozici neseřazené části.|||| První prvek neseřazené části zahrnout do seřazené části a zároveň neseřazenou část zmenšit o 1 prvek zleva.|||| Opakovat kroky 2 až 5 pro zbylou neseřazenou část.]
[V čem spočívá základní myšlenka algoritmu insertion sort?] -> [Každý nezařazený prvek algoritmus zařadí na správné místo do již seřazené posloupnosti.]
[Všechny podstromy haldy jsou také haldy.] -> [Ano]
[Jaké jsou praktické výhody reprezentace s plovoucí řádovou čárkou oproti reprezentaci s pevnou řádovou čárkou?] -> [Existují standardy pro tuto reprezentaci.|||| Lze jí reprezentovat větší rozsah čísel než s pevnou/fixní řádovou čárkou.]
[Co patří mezi nepoziční číselné soustavy?] -> [římské číslice|||| čárky pro počítání piv na lístku]
[Které operace nad prvky v poli jsou výrazně efektivnější?] -> [Přidání prvku na konec pole|||| Smazání prvku na konci pole]
[Pokud
x=00000100
a
y=00000101
. Poté nám operace
x
AND
y
vrátí __.] -> [00000100]
[Jakým způsobem lze vypočítat n-tou mocninu čísla x?] -> [1
2
3
4
function functionA(x, n) {
    if (n==0) return 1
    else return (x * functionA(x, n-1))
}|||| 1
2
3
4
function functionA(x, n) {
    if (n==0) return 1
    else return (functionA(x, n-1)*x)
}]
[Bit, který je při __ vysouván z hodnoty ven, je při rotaci opět vkládán na opačném konci.] -> [posuvu|||| rotaci]
[Na jakých principech fungují následující typy vyhledávaní?] -> [Binární vyhledávání|||| Půlení intervalu.|||| Lineární vyhledávání|||| Procházení prvek po prvku.]
[Pokud indexujeme v haldě od hodnoty 0, pak pro potomky bude platit __ a 2 ⋅ i + 2 .] -> [2 ⋅ i + 1|||| 2 ⋅ i + 2]
[Jak vypadá průběh algoritmu heapsort?] -> [Postavíme max nebo min heap.|||| Utrhneme vrchol haldy a prohodíme utržený prvek s posledním prvkem haldy.|||| Zmenšíme haldu o 1.|||| Vrátíme se do kroku číslo 2, pokud jsou v haldě prvky.|||| Pole je seřazené v opačném pořadí, než je priorita prvků.]
[Rychlost algoritmu závisí jen na objemu vstupních dat.] -> [Ne]
[Jak vypadá průběh algoritmu insertion sort?] -> [Rozdělit posloupnost na seřazenou a neseřazenou tak, že seřazená obsahuje první prvek posloupnosti.|||| Z neseřazené části vybrat první prvek a zařadit jej na správné místo v seřazené posloupnosti.|||| Prvky v seřazené posloupnosti posunout o jednu pozici doprava.|||| Seřazenou část zvětšit o jeden prvek. Naopak neseřazenou část o jeden prvek zleva zmenšit.|||| Kroky 2–5 opakovat až do úplného seřazení neseřazené části.]
[Jak funguji následující typy algoritmu?] -> [Algoritmus stabilní|||| Zachovává při své práci pořadí záznamů se stejným klíčem.|||| Algoritmus nestabilní|||| Prohodí při své práci pořadí záznamů se stejným klíčem.]
[Základem řadicího algoritmu heapsort je datová struktura __.] -> [halda]
[Který binární zápis má desítkové číslo 17?] -> [10001]
[Máme následující vstupní hodnoty [121, 145, 273, 542, 464, 275] a hashovací funkci
x mod 10
.
Pokud nastane kolize, tak se prvek vloží na konec spojového seznamu na tomto adresním místě. Jak bude ve výsledku vypadat hashovací tabulka?] -> [1 121
2 542
3 273
4 464
5 145, 275
6]
[Jsou operace ve spojovém seznamu s hlavou i ocasem stejně časově náročné jako operace ve spojovém seznamu pouze s hlavou?] -> [Ne]
[Je desítkové číslo 0.00005 korektně reprezentováno v reprezentaci s plovoucí řádovou čárkou jako
+.5×10−5
?] -> [Ne]
[Pro hledání jména v telefonním seznamu je vhodnější použít binární vyhledávání.] -> [binární vyhledávání]
[O který typ algoritmu se jedná, pokud:
1
2
3
INPUT: (4, 5), (3, 2), (4, 3), (5, 4), (6, 4) // (klíč, hodnota)
OUTPUT1: (3, 2),  (4, 5),  (4, 3),  (5, 4),  (6, 4)
OUTPUT2: (3, 2),  (4, 3),  (4, 5),  (5, 4),  (6, 4)] -> [nestabilní]
[Mějme algoritmus A s délkou výpočtu
n+1000
a algorimus B s délkou výpočtu
4n
, kde
n
je počet vstupních dat. Který algoritmus z hlediska časové složitosti je vhodnější pro svou nízkou hodnotu
n
(n<5)
?] -> [B]
[Mějme jednosměrný a obousměrný spojový seznam. Dejme tomu, že oba seznamy uchovávají hlavu i ocas.
Jsou z hlediska asymptotické složitosti jednotlivé operace nad těmito seznamy stejně náročné?] -> [Ne]
[Asociativní pole jsou nejčastěji implementována pomocí:] -> [vyhledávacího stromu|||| hashovací tabulky]
[Jak bude vypadat zásobník po provedení následujících operací? Symbol | označuje dno zásobníku.
s.push(1)
s.push(2)
s.push(3)
s.pop()
s.push(4)
s.pop()] -> [| 1 2]
[Prvky v poli se indexují vždy od 0.] -> [Ne]
[V čem spočívá základní myšlenka algoritmu bubble sort?] -> [Každé dva sousední prvky se prohodí, nejsou-li ve správném pořadí.]
[Pokud do prázdného binárního vyhledávacího stromu vložíme postupně n hodnot, jaká bude jeho hloubka v nejlepším možném případě?] -> [O(log⁡n)]
[Ve kterých případech je výhodnější použít spojový seznam namísto pole?] -> [Chceme pracovat s prvky na začátku|||| Předem neznáme počet vstupních prvků|||| Nemáme k dispozici souvislý blok paměti]
[Použití rekurze místo iterace vždy vede k optimálnějšímu a rychlejšímu řešení.] -> [Ne]
[Jaký bude výsledek po provedení operace push nad zásobníkem?
1
2
  let stack = [1, 2, 2, 3, 4]; //číslo 4 - ukazatel zásobníku
  stack.push(4);] -> [1
  let stack = [1, 2, 2, 3, 4, 4];]
[Jak bude vypadat funkce v JavaScript s použitím rekurze pro tisk řetězce pozpátku?] -> [1
2
3
4
5
6
  function reverseString(str) {
  if (str === "")
    return "";
  else
    return reverseString(str.substr(1)) + str.charAt(0);
}]
[Platí, že
2n2−7∈O(n2)
?] -> [Ano]
[Platí, že P = NP?] -> [Nevíme]
[Kterou část záznamu používáme pro porovnávání prvku?] -> [klíč]
[Merge sort je algoritmus založený na __.] -> [principu rozděl a panuj]
[Říkáme, že řazení je __, pokud nedojde v jeho průběhu k prohození prvků se stejnou hodnotou.] -> [stabilní]
[Co z následujícího platí pro každý typ seznamu?] -> [Kruhový seznam|||| Poslední prvek seznamu ukazuje na první prvek téhož seznamu.|||| Obousměrný seznam|||| Odkazuje prvek na následující i předcházející prvek.|||| Jednosměrný seznam|||| Odkazuje každý prvek na následující prvek.]
[__ pracuje tak, že vstupní záznamy rozděluje na části se záznamy odpovídající určitému kritériu, přičemž rozdělování končí u úseků se dvěma nebo jedním prvkem.] -> [Rozdělovací metoda]
[Kterými způsoby můžeme spočítat složitost algoritmu?] -> [počet elementárních operací|||| počet elementárních operací nad daty|||| počet porovnání]
[Závisí v binárním vyhledávacím stromě časová složitost operací hledání, vkládání a mazání na hloubce stromu?] -> [Ano]
[Jaké platí vlastnosti pro algoritmus heapsort?] -> [Není přirozený.|||| Má konstantní paměťovou náročnost.|||| Není stabilní.]
[Co se stane v případě odstranění prvního prvku bufferu?] -> [První ukazatel (StartPointer) inkrementuje.]
[Asymptotická složitost výběru a čtení prvku na prvním indexu je __ , složitost operace přidání prvku na konec fronty je O (1) .] -> [O (1)]
[Kde v binárním vyhledávací stromě leží minimum z celého stromu?] -> [Pokud následujeme potomky z kořene doleva, dokud to lze]
[Jaká je funkce jednotlivých ukazatelů v kruhovém bufferu?] -> [Druhý ukazatel (EndPointer)|||| Míří na první volné místo v poli.|||| První ukazatel (StartPointer)|||| Míří na první obsazený prvek.]
[Kde je zapsáno asociativní pole správně?] -> [1
let hash = { "one": 1, "two": 2, "three": 3 };|||| 1
let hash = { 1: "one", 2: "two", 3: "three" };|||| 1
let hash = { null: "one", 2: "two", 3: "three" };|||| 1
let hash = { "one": "one", "two": "two", "three": "three" };]
[Jak bude vypadat fronta q po provedení následujících operací? Symbol | označuje začátek fronty.
q.enqueue(1)
q.enqueue(2)
q.enqueue(3)
q.dequeue()
q.enqueue(4)
q.dequeue()] -> [| 3 4]
[Lze každou rekurzi nahradit iterací a naopak?] -> [Ano]
[Existuje algoritmus, jehož časová složitost v nejlepším, průměrném i nejhorším případě je stejná pro danou velikost zadání?] -> [Ano]
[Za __ se považuje algoritmus, který zpracuje rychleji seřazenou nebo částečně seřazenou posloupnost, když nepřirozenému algoritmu zpracovávaní seřazené nebo částečně seřazené posloupnosti trvá déle.] -> [přirozený algoritmus|||| nepřirozenému algoritmu]
[Který z kódů je kódem algoritmu quicksort?] -> [1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
quickSort(array, left, right) {
    if (left < right) { 
      let boundary = left;
      for(let i = left + 1; i < right; i++) { 
        if(array[i] < array[left]) {
          boundary = boundary + 1;
          this.swap(array, i, boundary);
        }
      }
      this.swap(array, left, boundary);
      this.quickSort(array, left, boundary);
      this.quickSort(array, boundary + 1, right);
    }     
}
        ]
[Který z kódů je kódem algoritmu insertion sort?] -> [1
2
3
4
5
6
7
8
9
10
11
function insertionSortAscending(array) {
  for (let i = 0; i < array.length; i++) {
    let j = i - 1;
    let item = array[i];
    while (j >= 0 && item < array[j]) {
      array[j + 1] = array[j];
      j--;
    }
    array[j + 1] = item;
  }
}]
[Co z následujícího platí pro množinu?] -> [Neumožňuje duplicity.|||| Umožňuje ukládat libovolné prvky, ale bez určení konkrétního pořadí.|||| Lze realizovat pomocí pole nebo spojového seznamu.]
[Přiřaď každému pojmu související zkratku a obrázek.] -> []
[Množina je nejčastěji implementována pomocí:] -> [hashovací tabulky|||| vyhledávacího stromu]
[Selection sort je vhodný zejména pro uspořádání malých množství dat.] -> [malých]
[Máme neseřazené pole [86, 84, 37, 56, 79, 90, 31, 86, 43]. Který prvek bude pivotem, pokud budeme volit metodou mediánu?] -> [79]
[Které vlastnosti platí pro binární vyhledávací strom?] -> [Strom může, ale také nemusí umožňovat duplicity.|||| Každý uzel má přiřazený klíč.|||| Binární strom má v každém uzlu nejvýše dva potomky.]
[K popisu paměťové/prostorové složitosti algoritmu používáme funkci závisející na velikosti vstupních dat.] -> [funkci]
[O jaký typ přímé rekurze se jedná?
1
2
3
4
5
6
7
8
function f(low, high) {
    if low == 1 && high == 1
      return 1;
    else{  
      mid = (low + high) / 2;
      return f(low + 1, mid) + f(mid+1, high-1);
    }  
}] -> [stromová]
